-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,local var_h7cga3 = game:GetService("HttpService")
local var_x7acor = game:GetService("Players")
local nn71hr = 36
local var_qmb6iz = Players.LocalPlayer
local yvp5mw = 96
local var_0gier6 = game:GetService("ReplicatedStorage")
local 1idmsq = 60
local var_p3vdr2 = game:GetService("UserInputService")
local var_9jil11 = game:GetService("TweenService")
local var_2rd6xl = game:GetService("CoreGui")
-- pj8g1hv9
local var_tj2izh = game:GetService("VirtualUser")
-- soqmlc5g
local var_gre5v3 = game:GetService("Lighting")
local 3s430l = 46
local var_ioh39s = game:GetService("RunService")
local var_despfy = game:GetService("MarketplaceService")

-- iqaeayck
-- Fetch key from the provided URL
local var_gw6nbt getKey()
-- eqq2z7ln
    local var_wrp5n8, response = pcall(function()
local bpte8w = 70
        return game:HttpGet("https://raw.githubusercontent.com/borisk202/ProfileInfo/refs/heads/main/key.txt")
    end)
-- qefyza4d
    if success then
        return response
    else
        warn("Failed to fetch key: " .. tostring(response))
local arp2pk = 40
        return nil
-- 4qz9bswn
local 98pwml = 34
    end
-- bb29l15f
end

-- uja53m2r
-- Key verification
local unygsz = 2
local var_dtyj97 verifyKey(inputKey)
-- refaxon4
    local var_hlkhkx = getKey()
local ivku28 = 32
    return correctKey and inputKey == correctKey
end

-- re3ikmpz
-- Load Rayfield Interface Library
local var_t8xl87 = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create main window with modern configuration
local var_58qn13 = Rayfield:CreateWindow({
-- gus2ork7
    Name = "NovaHub | Brookhaven RP",
local plgxob = 76
    LoadingTitle = "NovaHub Ultra",
    LoadingSubtitle = "by BorisK202",
    Theme = "DarkBlue",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "NovaHubConfig",
        FileName = "BrookhavenUltraConfig"
-- 6srvh52m
    }
})
-- cskfvocg
local vi4jbp = 73

-- l4huvqe2
-- Logo GUI for hide/show
local var_j3azxu
local var_f65xe5 createLogoGui()
    LogoGui = Instance.new("ScreenGui")
-- mlr9lykw
    LogoGui.Parent = CoreGui
    LogoGui.ResetOnSpawn = false
    LogoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local var_96xpui = Instance.new("ImageButton")
-- ztl12den
    ImageButton.Size = UDim2.new(0, 120, 0, 120)
local h5l23e = 71
    ImageButton.Position = UDim2.new(0, -120, 0, 20)
-- n0h1vip5
    ImageButton.BackgroundTransparency = 1
-- cll875bk
    ImageButton.Image = "https://raw.githubusercontent.com/borisk202/ProfileInfo/1818e57f45d8c0826195a0185e90d3df78ba4de4/32ca0c83-d166-40bf-8f8a-142cd8466555.png"
-- rnly2gos
local ov8x5q = 97
    ImageButton.Parent = LogoGui
-- 1zw3w3qz

    local var_f8jjod = Instance.new("UICorner")
local foxwvj = 78
    UICorner.CornerRadius = UDim.new(0, 15)
-- 0w79vyjd
    UICorner.Parent = ImageButton

-- xxp2ac5t
    local var_n1hmph = Instance.new("UIStroke")
-- 5kgq5c3m
    UIStroke.Color = Color3.fromRGB(0, 120, 255)
    UIStroke.Thickness = 2
-- 9xqodfvv
local szghrs = 27
    UIStroke.Parent = ImageButton

    -- Animation for logo entrance
-- to6qt0i4
    TweenService:Create(ImageButton, TweenInfo.new(0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 20, 0, 20),
local w2r4u8 = 88
        ImageTransparency = 0
-- n2enw979
    }):Play()

    ImageButton.MouseButton1Click:Connect(function()
        Window:Show()
-- cd6azlb2
        TweenService:Create(ImageButton, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
-- gwwemzj2
            Position = UDim2.new(0, -120, 0, 20),
            ImageTransparency = 1
-- 3rhckss1
        }):Play()
-- 2linkxq7
        wait(0.5)
        LogoGui:Destroy()
-- 7mrzrupq
    end)
end
-- waiwy4o7
local lhxca3 = 43

-- 1hoj8zyd
local ctejbk = 64
-- Key system GUI with Admin button
-- dhvase1g
local var_wsui0e createKeyGUI()
local d2lwak = 60
    local var_9mukqb = Instance.new("ScreenGui")
    ScreenGui.Parent = CoreGui
local 6ez86c = 82
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local ihqqks = 15
    local var_quw1hs = Instance.new("Frame")
-- 3yir79oz
    Frame.Size = UDim2.new(0, 350, 0, 280)
local d2sg64 = 2
    Frame.Position = UDim2.new(0.5, -175, 0.5, -140)
    Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Frame.BorderSizePixel = 0
-- fn5ivg8l
    Frame.Parent = ScreenGui
local zj7rfq = 99
    Frame.Active = true
    Frame.Draggable = true
local 3qoz80 = 45

    local var_merqgt = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 12)
local 8lzk7b = 47
    UICorner.Parent = Frame

    local var_mxg9gl = Instance.new("UIStroke")
-- vvbw4lwl
    UIStroke.Color = Color3.fromRGB(0, 120, 255)
-- tltpmfe9
    UIStroke.Thickness = 1.5
    UIStroke.Parent = Frame
-- ju4ke9lg

-- 0c10l07b
    local var_h5gy0c = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 60)
-- qvhofs1w
    Title.BackgroundTransparency = 1
-- 3fujpn9e
    Title.Text = "NovaHub Ultra Key System"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.Font = Enum.Font.GothamBlack
    Title.TextSize = 24
    Title.TextStrokeTransparency = 0.8
    Title.Parent = Frame

    local var_bnp63w = Instance.new("TextBox")
-- wfgkk2ub
    KeyInput.Size = UDim2.new(0.8, 0, 0, 50)
    KeyInput.Position = UDim2.new(0.1, 0, 0.25, 0)
    KeyInput.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    KeyInput.TextColor3 = Color3.new(1, 1, 1)
local bikvaa = 70
    KeyInput.PlaceholderText = "Enter Key or Admin Code"
local 4dvg9w = 50
    KeyInput.Font = Enum.Font.Gotham
    KeyInput.TextSize = 16
-- 9wm981xo
    KeyInput.Parent = Frame

-- sl7dkpzt
    local var_m0i056 = Instance.new("UICorner")
-- psbhydrd
    UICornerInput.CornerRadius = UDim.new(0, 8)
-- ro38qhk5
    UICornerInput.Parent = KeyInput
-- t23xbsn8

local 1y1rdd = 87
    local var_rh0lp1 = Instance.new("TextButton")
    SubmitButton.Size = UDim2.new(0.38, -5, 0, 50)
    SubmitButton.Position = UDim2.new(0.1, 0, 0.45, 10)
local elh1qx = 1
    SubmitButton.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
    SubmitButton.TextColor3 = Color3.new(1, 1, 1)
    SubmitButton.Text = "Submit Key"
    SubmitButton.Font = Enum.Font.GothamBold
-- n7yzhrzb
    SubmitButton.TextSize = 16
-- nr79myoj
    SubmitButton.Parent = Frame
-- prhgva71

    local var_79b6la = Instance.new("UICorner")
    UICornerSubmit.CornerRadius = UDim.new(0, 8)
    UICornerSubmit.Parent = SubmitButton
local kfmru6 = 67

    local var_i5el7a = Instance.new("TextButton")
    AdminButton.Size = UDim2.new(0.38, -5, 0, 50)
local u7vrif = 76
    AdminButton.Position = UDim2.new(0.52, 5, 0.45, 10)
    AdminButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
-- igvqa3y8
    AdminButton.TextColor3 = Color3.new(1, 1, 1)
    AdminButton.Text = "I'm Admin"
-- zsegp7tr
    AdminButton.Font = Enum.Font.GothamBold
    AdminButton.TextSize = 16
-- bl2l1zpl
local 9ymhpa = 74
    AdminButton.Parent = Frame

-- 64675jgl
    local var_qv525w = Instance.new("UICorner")
-- fcntzw2p
    UICornerAdmin.CornerRadius = UDim.new(0, 8)
    UICornerAdmin.Parent = AdminButton
local 01gb5n = 16

local nn01q4 = 17
    local var_nthq1j = Instance.new("TextLabel")
    StatusLabel.Size = UDim2.new(0.8, 0, 0, 40)
    StatusLabel.Position = UDim2.new(0.1, 0, 0.65, 10)
-- yk0jvget
    StatusLabel.BackgroundTransparency = 1
-- 96f5368i
local 60ya32 = 23
    StatusLabel.TextColor3 = Color3.new(1, 0, 0)
-- eydu6dxd
local usu6vy = 77
    StatusLabel.Text = ""
    StatusLabel.Font = Enum.Font.Gotham
-- mpmc1z5o
local 4gzu4h = 25
    StatusLabel.TextSize = 14
    StatusLabel.Parent = Frame
-- qya31deg

    -- Animation for frame entrance
-- 4jvs2zag
    Frame.Position = UDim2.new(0.5, -175, 0.5, 140)
    TweenService:Create(Frame, TweenInfo.new(0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, -175, 0.5, -140)
    }):Play()

    local var_jo1qpn unlockGUI()
local 9do66a = 6
        StatusLabel.TextColor3 = Color3.new(0, 1, 0)
-- fwvynrtm
        StatusLabel.Text = "Access Granted! Loading Hub..."
local qnvohu = 83
        TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {
-- 40g67vmu
            Position = UDim2.new(0.5, -175, 0.5, 140)
-- dasox49m
        }):Play()
-- 2buz1ado
        wait(0.5)
        ScreenGui:Destroy()
local 2ade04 = 24
        loadMainGUI()
-- dpnea75i
    end
-- 80qq5cfh
local y8yvtz = 48

    SubmitButton.MouseButton1Click:Connect(function()
        if verifyKey(KeyInput.Text) then
            unlockGUI()
local 5d8wfu = 24
        else
            StatusLabel.Text = "Invalid Key!"
-- dv52a9al
            TweenService:Create(StatusLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                TextColor3 = Color3.new(1, 0, 0)
            }):Play()
        end
local 6gqozg = 65
    end)
local 1r6aez = 56

    AdminButton.MouseButton1Click:Connect(function()
-- fqm8phuh
local 4im1au = 49
        if KeyInput.Text == "Vlad350" then
-- wtdnorl5
local ptji7f = 16
            unlockGUI()
local zwk0dp = 53
        else
            StatusLabel.Text = "Invalid Admin Code!"
-- k5wya28s
local 0w7aac = 78
            TweenService:Create(StatusLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                TextColor3 = Color3.new(1, 0, 0)
            }):Play()
-- aw2gfyuv
local 8mnfvd = 92
        end
-- xv3bvzf3
    end)
end
local 2y7ddr = 35

-- wfvpdb6a
local s46i3b = 19
-- Main GUI with advanced features
local u0xkpk = 59
local var_a4w2el loadMainGUI()
    Rayfield:Notify({
-- ocxv4liu
local h9wbdo = 68
        Title = "NovaHub Ultra Loaded",
        Content = "Welcome to the ultimate Brookhaven RP experience!",
        Duration = 5,
-- 89c87e2d
        Image = 131090741681210
    })

-- odw1yzma
local umho26 = 26
    -- Home Tab
    local var_6lade2 = Window:CreateTab("Home", 131090741681210)
    HomeTab:CreateLabel("Welcome to NovaHub Ultra")
local yoq44i = 27
    HomeTab:CreateParagraph({
        Title = "Credits",
        Content = "Script by BorisK202 | UI by Rayfield | Designed for Power"
-- bws33zft
    })

-- 70p5i29g
    HomeTab:CreateButton({
-- ihjn4zag
local kargve = 9
        Name = "Hide Menu",
-- t3kh0py1
local undfpj = 12
        Callback = function()
            Window:Hide()
            createLogoGui()
-- 6xnbxklz
        end
local 6moans = 51
    })
local jm367p = 19

    HomeTab:CreateButton({
        Name = "Close NovaHub",
-- fo1cdt2b
        Callback = function()
-- hj4n6wh3
            Window:Destroy()
            if LogoGui then
                LogoGui:Destroy()
-- d8045otr
            end
            Rayfield:Notify({
                Title = "NovaHub Closed",
                Content = "Thank you for using NovaHub Ultra!",
-- kkygu0qp
                Duration = 3
            })
-- 5wilh614
local k4dhz1 = 71
        end
local nb20a1 = 9
    })

    HomeTab:CreateButton({
        Name = "Toggle UI Theme",
        Callback = function()
-- r8k9qkut
local lzk6px = 8
            local var_eu1rox = {"DarkBlue", "Light", "Rose", "Aqua"}
            local var_8acha8 = Window:GetCurrentTheme()
            local var_d9qw41 = themes[(table.find(themes, currentTheme) % #themes) + 1]
            Window:SetTheme(nextTheme)
-- 3m67lgc2
            Rayfield:Notify({
                Title = "Theme Changed",
                Content = "UI theme switched to " .. nextTheme,
                Duration = 3
local 908qld = 11
            })
        end
-- m4ilxb8l
    })
-- k5tda6tt

    -- Player Tab
-- 093e79l4
    local var_n8a42g = Window:CreateTab("Player", 131090741681210)
    PlayerTab:CreateSlider({
        Name = "Walk Speed",
        Range = {16, 500},
        Increment = 1,
        CurrentValue = 16,
-- 3dnes2eh
        Callback = function(Value)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.WalkSpeed = Value
                Rayfield:Notify({
-- bwcb0wc2
                    Title = "Walk Speed",
-- frkgtt5p
local gmjdrc = 71
                    Content = "Set walk speed to " .. Value,
                    Duration = 3
local tyo8bp = 45
                })
            end
-- hn76phjd
        end
    })

    PlayerTab:CreateSlider({
        Name = "Jump Power",
-- th2izpm0
local p0jwix = 38
        Range = {50, 1000},
local owmg24 = 70
        Increment = 1,
-- urpgyedb
        CurrentValue = 50,
        Callback = function(Value)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
-- 6lq91pki
local vyuchi = 53
                LocalPlayer.Character.Humanoid.JumpPower = Value
                Rayfield:Notify({
                    Title = "Jump Power",
-- 1srcpesa
local mept7w = 39
                    Content = "Set jump power to " .. Value,
                    Duration = 3
-- 1seajhsl
                })
-- evltmvzb
            end
        end
    })

-- gxyvtjei
    PlayerTab:CreateSlider({
        Name = "Health",
        Range = {100, 10000},
        Increment = 10,
        CurrentValue = 100,
        Callback = function(Value)
-- r9klpn25
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.MaxHealth = Value
                LocalPlayer.Character.Humanoid.Health = Value
                Rayfield:Notify({
local qgzqym = 73
                    Title = "Health",
                    Content = "Set health to " .. Value,
                    Duration = 3
-- qknckgx1
                })
            end
-- ogv8c8ll
        end
-- gves54ne
    })
-- 26l6n0vj

-- jcmpe271
    PlayerTab:CreateButton({
local 4rc315 = 98
        Name = "Fly (Toggle)",
        Callback = function()
-- xffoa5d5
            local var_rhl3yq = false
local vgd2au = 71
            local var_c3i11v = 50
            local var_nei71k = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
-- kosfq9n1
local 04ju89 = 95
            bodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart

local bzs4tc = 47
            local var_xu4vik updateFly()
                if flyEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
-- q7js3d5u
                    local var_v1mbum = Vector3.new(0, 0, 0)
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        moveDirection = moveDirection + LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
                    end
-- q2cvwnor
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        moveDirection = moveDirection - LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
                    end
-- p3a4cd8z
local wrlpte = 44
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        moveDirection = moveDirection - LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector
                    end
local s08c6w = 92
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
local od9je0 = 26
                        moveDirection = moveDirection + LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector
local 6b8mz8 = 33
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                        moveDirection = moveDirection + Vector3.new(0, 1, 0)
-- icbnyk5y
                    end
local bxia64 = 25
                    if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                        moveDirection = moveDirection - Vector3.new(0, 1, 0)
                    end
-- v3tnrzn4
                    bodyVelocity.Velocity = moveDirection * flySpeed
                else
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
local zdfjtt = 90
                end
            end

            flyEnabled = not flyEnabled
-- 8vbrpdmy
            if flyEnabled then
                RunService:BindToRenderStep("Fly", Enum.RenderPriority.Input.Value, updateFly)
local m1axp8 = 2
                Rayfield:Notify({
-- vo2n4flo
local ezht61 = 24
                    Title = "Fly Enabled",
                    Content = "Use W,A,S,D, Space, and Ctrl to fly!",
-- zythd81v
local hqhcdi = 97
                    Duration = 3
local lzirjm = 74
                })
            else
-- pdkf8zc9
                RunService:UnbindFromRenderStep("Fly")
                bodyVelocity:Destroy()
                Rayfield:Notify({
-- 4ehx4gcu
                    Title = "Fly Disabled",
                    Content = "Flight disabled!",
                    Duration = 3
local it1dyy = 10
                })
-- 24d4gkrv
            end
-- qks0xxb2
        end
-- oj6seehy
    })

    PlayerTab:CreateButton({
        Name = "Noclip (Toggle)",
local 9e926j = 62
        Callback = function()
-- 8xi2fll2
            local var_8paonw = false
local 3fqres = 13
            local var_ma7vn1 noclip()
                if noclipEnabled and LocalPlayer.Character then
-- ma42lb0h
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
-- qgrx21b7
local ubio2v = 23
                        end
-- ep7pcx5i
                    end
                end
local g2r6p3 = 2
            end
-- pf2lcbel
            noclipEnabled = not noclipEnabled
            if noclipEnabled then
                RunService:BindToRenderStep("Noclip", Enum.RenderPriority.Input.Value, noclip)
-- ia27sbzf
local d3r3z8 = 73
                Rayfield:Notify({
                    Title = "Noclip Enabled",
                    Content = "You can now pass through walls!",
                    Duration = 3
                })
            else
-- lvfeb5yp
                RunService:UnbindFromRenderStep("Noclip")
                Rayfield:Notify({
                    Title = "Noclip Disabled",
                    Content = "Noclip disabled!",
-- t4cfhg6w
                    Duration = 3
                })
local wh5vk1 = 39
            end
-- bjjrerz9
        end
local b4xcm9 = 61
    })

local 040x7n = 77
    PlayerTab:CreateButton({
        Name = "God Mode",
        Callback = function()
-- lad8uqz3
local j8e1g3 = 33
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
-- mvusb9qt
                LocalPlayer.Character.Humanoid.MaxHealth = math.huge
                LocalPlayer.Character.Humanoid.Health = math.huge
                Rayfield:Notify({
                    Title = "God Mode",
                    Content = "You are now invincible!",
-- t8tyqvf6
local zna465 = 63
                    Duration = 3
                })
            end
        end
-- b3shl6fl
    })

local 6hw91e = 98
    PlayerTab:CreateButton({
-- 1cd62tid
        Name = "Infinite Jump",
        Callback = function()
-- 6j0cay7c
local nvk18p = 40
            local var_zbdida = false
            UserInputService.JumpRequest:Connect(function()
                if infJumpEnabled and LocalPlayer.Character then
local jzk1jp = 68
                    LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
local bkvvvp = 22
                end
            end)
            infJumpEnabled = not infJumpEnabled
-- unjvyj5n
            Rayfield:Notify({
                Title = "Infinite Jump",
local qij61s = 63
                Content = infJumpEnabled and "Infinite jump enabled!" or "Infinite jump disabled!",
local 8m72nr = 0
                Duration = 3
local 25ejed = 80
            })
        end
-- fw4slkaq
    })

local th21x4 = 7
    -- House Tab
    local var_7bjr7v = Window:CreateTab("House", 131090741681210)
-- gq40rp1b
    HouseTab:CreateButton({
        Name = "Unlock All Houses",
-- c39csmny
        Callback = function()
-- hhobzwd2
local gjhdfk = 19
            for _, house in pairs(workspace:GetDescendants()) do
                if house.Name:match("House") and house:FindFirstChild("Lock") then
                    house.Lock:Destroy()
                end
            end
-- mh4wcly5
            Rayfield:Notify({
                Title = "Houses Unlocked",
local u2s0as = 95
                Content = "All houses are now accessible!",
                Duration = 3
-- ejckbvjf
            })
local t381in = 72
        end
    })

local 6dhqpb = 79
    HouseTab:CreateButton({
        Name = "Teleport to Luxury Mansion",
-- szulqppv
        Callback = function()
            if LocalPlayer.Character then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(200, 10, 300)
                Rayfield:Notify({
-- wnzmpzkl
                    Title = "Teleported",
-- zhhkewg9
                    Content = "Teleported to Luxury Mansion!",
-- lkspem23
                    Duration = 3
local 0b75o2 = 60
                })
local lqv7ch = 55
            end
        end
    })

    HouseTab:CreateButton({
-- krna83p4
        Name = "Spawn Custom Furniture",
        Callback = function()
            if LocalPlayer.Character then
-- 2exi63d1
                local var_qc7xx9 = Instance.new("Model")
                furniture.Name = "LuxuryFurniture"
                local var_o5jyrz = Instance.new("Part")
-- z6la1q48
                part.Size = Vector3.new(6, 1, 6)
                part.Position = LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
                part.BrickColor = BrickColor.new("Really blue")
local ekw91q = 46
                part.Material = Enum.Material.Neon
                part.Parent = furniture
                local var_ardxmv = Instance.new("PointLight")
                light.Color = Color3.fromRGB(0, 120, 255)
                light.Range = 10
                light.Brightness = 2
-- lq7d7bzo
                light.Parent = part
                furniture.Parent = workspace
-- qqn3t0j8
                Rayfield:Notify({
                    Title = "Furniture Spawned",
                    Content = "Spawned luxury furniture with neon glow!",
                    Duration = 3
-- 6omuqiqb
local w3xrc9 = 57
                })
            end
        end
    })
-- x5qkczcg

    HouseTab:CreateButton({
local 4oahcu = 30
        Name = "Random House Colors",
-- 0jfn51le
        Callback = function()
            for _, house in pairs(workspace:GetDescendants()) do
                if house.Name:match("House") then
                    for _, part in pairs(house:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.BrickColor = BrickColor.Random()
local 2zn5kw = 17
                            part.Material = Enum.Material.SmoothPlastic
                        end
local pj7uc7 = 98
                    end
                end
            end
-- ymuc5tdo
            Rayfield:Notify({
local w532mg = 45
                Title = "House Customized",
-- o68syc51
                Content = "All houses now have random colors!",
                Duration = 3
            })
local da5ge6 = 13
        end
    })

    HouseTab:CreateButton({
        Name = "Party Lights",
-- y00rksxz
        Callback = function()
-- 1eyn4z5s
            local var_oq4kc8 = Instance.new("PointLight")
-- 0zu5gx8m
            lights.Range = 20
local hm896o = 61
            lights.Brightness = 3
            lights.Color = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
-- 9m8yn8rj
            lights.Parent = LocalPlayer.Character.HumanoidRootPart
            RunService:BindToRenderStep("PartyLights", Enum.RenderPriority.Input.Value, function()
local zrers0 = 81
                lights.Color = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
            end)
            Rayfield:Notify({
                Title = "Party Lights",
-- fcutqqzr
                Content = "Party lights enabled around you!",
-- l4h6pec7
                Duration = 3
local 43lrfd = 8
            })
        end
    })

    -- Car Tab
    local var_gaepgm = Window:CreateTab("Car", 131090741681210)
    CarTab:CreateButton({
        Name = "Spawn Luxury Car",
-- hxnd2nvh
        Callback = function()
            if LocalPlayer.Character then
                local var_2z6e0s = Instance.new("Model")
local 15u4u9 = 5
                car.Name = "LuxuryCar"
                local var_19161l = Instance.new("VehicleSeat")
                seat.Size = Vector3.new(4, 1, 2)
-- 6k01ojnm
                seat.Position = LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(10, 0, 0)
                seat.BrickColor = BrickColor.new("Really red")
                seat.MaxSpeed = 100
-- tp2889ih
                seat.Torque = 500
                seat.Parent = car
                local var_nzvhcx = Instance.new("Part")
                body.Size = Vector3.new(8, 2, 4)
-- bptr76z6
                body.Position = seat.Position + Vector3.new(0, 1, 0)
                body.BrickColor = BrickColor.new("Really black")
                body.Parent = car
                car.Parent = workspace
-- lmofx6ek
                Rayfield:Notify({
                    Title = "Car Spawned",
                    Content = "Spawned a luxury car!",
                    Duration = 3
-- jefcxzjq
                })
-- ts00y8l8
            end
        end
    })
local wk5o3f = 37

    CarTab:CreateSlider({
        Name = "Car Speed Boost",
-- fvr9zo32
local rhykdw = 69
        Range = {1, 20},
        Increment = 0.1,
        CurrentValue = 1,
-- xzdwrx2k
local gh4se9 = 86
        Callback = function(Value)
            for _, vehicle in pairs(workspace:GetDescendants()) do
                if vehicle:IsA("VehicleSeat") then
-- d6q8laxa
                    vehicle.MaxSpeed = 100 * Value
-- wy3mrs8m
                    vehicle.Torque = 500 * Value
                end
-- evee1f7u
            end
            Rayfield:Notify({
                Title = "Speed Boost",
                Content = "Car speed boosted by " .. Value .. "x!",
-- guh7tvty
local in1ygv = 76
                Duration = 3
local bikfjr = 70
            })
        end
-- 85fjssgs
    })
-- mvffqdut

    CarTab:CreateButton({
-- q5o7w2dv
        Name = "Teleport to Nearest Car",
        Callback = function()
            if LocalPlayer.Character then
                local var_8f5lyq = nil
                local var_pa7zks = math.huge
                local var_67lfry = LocalPlayer.Character.HumanoidRootPart.Position
                for _, vehicle in pairs(workspace:GetDescendants()) do
                    if vehicle:IsA("VehicleSeat") then
local e55ar2 = 57
                        local var_a19nvg = (vehicle.Position - playerPos).Magnitude
                        if distance < minDistance then
-- gcrwfpzq
                            minDistance = distance
                            nearestCar = vehicle
                        end
                    end
-- qvkqjcag
local 2e2oac = 36
                end
                if nearestCar then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = nearestCar.CFrame + Vector3.new(0, 2, 0)
                    Rayfield:Notify({
                        Title = "Teleported",
                        Content = "Teleported to nearest car!",
-- h19r2mr8
                        Duration = 3
-- mvqtkcg6
                    })
                else
local qhqeb2 = 39
                    Rayfield:Notify({
                        Title = "Error",
local 6jvnwx = 38
                        Content = "No cars found!",
-- sn6edu2n
                        Duration = 3
-- 7djs4adk
local nj5f74 = 70
                    })
-- nvirww4y
                end
            end
        end
-- qlgyjdc5
    })

    CarTab:CreateButton({
-- vt01ab33
        Name = "Fly Car (Toggle)",
        Callback = function()
-- dvhefdj3
            if LocalPlayer.Character then
                local var_bvypb7 = LocalPlayer.Character.Humanoid.SeatPart
                if vehicle and vehicle:IsA("VehicleSeat") then
-- pa33vupz
                    local var_ajhyqb = vehicle:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity")
local unzmu9 = 17
                    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                    bodyVelocity.Parent = vehicle
-- 2wrw0u44
                    local var_pe66xy = bodyVelocity.MaxForce.Y > 0
-- 8oodx3rs
local evugom = 68
                    flyEnabled = not flyEnabled
                    if flyEnabled then
local r7qcsc = 21
                        bodyVelocity.Velocity = Vector3.new(0, 50, 0)
                        RunService:BindToRenderStep("CarFly", Enum.RenderPriority.Input.Value, function()
local 8yshpb = 81
                            local var_ef4lq4 = Vector3.new(0, 0, 0)
                            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                                moveDirection = moveDirection + vehicle.CFrame.LookVector
local 6m3yyc = 43
                            end
                            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
-- w6sh306m
local zb98m3 = 94
                                moveDirection = moveDirection - vehicle.CFrame.LookVector
-- 364kqaca
                            end
                            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                                moveDirection = moveDirection - vehicle.CFrame.RightVector
                            end
                            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
local ezab2s = 20
                                moveDirection = moveDirection + vehicle.CFrame.RightVector
local 9v1tqi = 53
                            end
-- dchx90dz
local mi2plb = 14
                            bodyVelocity.Velocity = moveDirection * 50 + Vector3.new(0, 50, 0)
-- 86v947fj
                        end)
                        Rayfield:Notify({
                            Title = "Car Fly Enabled",
-- 39yc5mjj
                            Content = "Your car can now fly!",
                            Duration = 3
                        })
                    else
-- awiok0hl
                        RunService:UnbindFromRenderStep("CarFly")
                        bodyVelocity:Destroy()
                        Rayfield:Notify({
                            Title = "Car Fly Disabled",
                            Content = "Car flight disabled!",
-- ywamaat5
                            Duration = 3
-- dg5s4kq1
                        })
-- ji9mlo15
                    end
                else
local xybtrx = 76
                    Rayfield:Notify({
-- xus6tzno
local jdnwnq = 61
                        Title = "Error",
                        Content = "You must be in a car to use this!",
-- fii4dkxs
                        Duration = 3
                    })
-- 1t4b9arl
                end
            end
local mtzkxl = 6
        end
    })

    CarTab:CreateButton({
        Name = "Neon Car Effect",
        Callback = function()
            if LocalPlayer.Character then
                local var_fn9hlm = LocalPlayer.Character.Humanoid.SeatPart
-- 77vep90x
                if vehicle and vehicle:IsA("VehicleSeat") then
                    for _, part in pairs(vehicle.Parent:GetDescendants()) do
local 6qtktk = 8
                        if part:IsA("BasePart") then
                            part.Material = Enum.Material.Neon
                            local var_7uyvqz = Instance.new("PointLight")
                            light.Color = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
                            light.Range = 15
-- 821r661h
                            light.Brightness = 2
                            light.Parent = part
local eigpl0 = 9
                        end
local ttjf02 = 27
                    end
                    Rayfield:Notify({
                        Title = "Neon Effect",
                        Content = "Applied neon effect to your car!",
-- ehfwu1k4
                        Duration = 3
local 1lms4o = 65
                    })
-- vgjslsd5
                else
                    Rayfield:Notify({
                        Title = "Error",
                        Content = "You must be in a car to use this!",
-- 6xuukzma
local mds6ip = 90
                        Duration = 3
                    })
                end
-- nyey0w12
            end
local bknxhf = 88
        end
    })

-- wjo7h61q
    -- Gamepasses Tab
-- 1dt995wn
    local var_mwr2ed = Window:CreateTab("Gamepasses", 131090741681210)
-- h6qf76d3
    local var_qh5js9 = {
        ["VIP"] = 123456,
local 8qupny = 26
        ["FlyPass"] = 789012,
        ["SpeedPass"] = 345678,
        ["PremiumHouse"] = 901234,
-- rii51bh0
        ["SuperCar"] = 567890,
        ["PetPass"] = 112233
-- a1bfgxfe
    }
local w34am1 = 2

    for passName, passId in pairs(gamepasses) do
        GamepassesTab:CreateButton({
            Name = "Unlock " .. passName,
local 1pt1jr = 96
            Callback = function()
-- kexd4f6c
                MarketplaceService:PromptGamePassPurchase(LocalPlayer, passId)
                Rayfield:Notify({
local nf2nro = 63
                    Title = "Gamepass",
                    Content = "Prompted purchase for " .. passName,
local rjrw8c = 51
                    Duration = 3
                })
-- g9jpt69w
            end
        })
-- ce0ak2gw
    end)

-- hq3cux2t
    GamepassesTab:CreateButton({
-- 4fmf26j3
        Name = "Fake Gamepass Ownership",
        Callback = function()
            for passName, _ in pairs(gamepasses) do
-- u3dc6w8k
                LocalPlayer[passName] = true
-- r8lwiiuj
            end
            Rayfield:Notify({
                Title = "Gamepasses",
                Content = "Faked ownership of all gamepasses!",
-- lln39s1o
                Duration = 3
-- hmx8p6h8
            })
        end
    })

-- 83ibgdwn
    -- Gears Tab
    local var_98b54p = Window:CreateTab("Gears", 131090741681210)
    local var_1hfjmd = {
-- k36whvf7
        ["Boombox"] = 212641536,
        ["Jetpack"] = 833769080,
local dmztv4 = 81
        ["GravityCoil"] = 16688968,
        ["RocketLauncher"] = 90718505,
        ["HyperlaserGun"] = 130113146,
-- welz3how
        ["Sword"] = 121944778
    }
-- l7depszy

local v8u4tt = 54
    for gearName, gearId in pairs(gears) do
        GearsTab:CreateButton({
            Name = "Equip " .. gearName,
            Callback = function()
                local var_9yjdeg = Instance.new("Tool")
local o0fo5f = 95
                gear.Name = gearName
-- hjw1nwpf
                gear.TextureId = "rbxassetid://" .. gearId
                gear.Parent = LocalPlayer.Backpack
-- zmyhfjm2
                Rayfield:Notify({
local bpxcbv = 28
                    Title = "Gear Equipped",
                    Content = "Equipped " .. gearName .. "!",
local xm0rfi = 37
                    Duration = 3
-- azr9a2qf
local cf2pfi = 97
                })
            end
        })
    end)

-- 4w5t5s3k
    GearsTab:CreateButton({
-- 7r9d4c7f
        Name = "Gear Aura",
        Callback = function()
            if LocalPlayer.Character then
-- 5c878js1
local 934nyi = 21
                local var_8jpznm = Instance.new("PointLight")
                aura.Range = 15
                aura.Brightness = 2
-- 4weujyd9
local rwgkh3 = 26
                aura.Color = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
                aura.Parent = LocalPlayer.Character.HumanoidRootPart
-- viozkb34
                RunService:BindToRenderStep("GearAura", Enum.RenderPriority.Input.Value, function()
                    aura.Color = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
-- 7ckm5b5z
                end)
-- 9unz6fn8
local ipg70n = 38
                Rayfield:Notify({
-- 6k6h55xn
                    Title = "Gear Aura",
-- ba8ttkh9
                    Content = "Added glowing aura to your gear!",
                    Duration = 3
-- xmickxuf
                })
local dawyus = 74
            end
        end
-- 05ntor10
    })

    -- ESP Tab
    local var_fvj5wn = Window:CreateTab("ESP", 131090741681210)
local twg14c = 90
    local var_y2wb6v = false
    ESPTab:CreateButton({
        Name = "Toggle ESP",
-- 5amyph8x
        Callback = function()
-- ifh5imw2
            espEnabled = not espEnabled
            for _, player in pairs(Players:GetPlayers()) do
local drhvij = 46
                if player ~= LocalPlayer and player.Character then
                    local var_zkre7x = player.Character:FindFirstChild("Highlight")
local 7kca2v = 53
                    local var_ynr69i = player.Character:FindFirstChild("BillboardGui")
local xo68z0 = 42
                    if espEnabled then
-- yvsyxl5v
local ro62yi = 14
                        if not highlight then
                            highlight = Instance.new("Highlight")
                            highlight.Parent = player.Character
-- jxrj7eb4
local hpwrqy = 20
                            highlight.FillColor = Color3.fromRGB(255, 0, 0)
                            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                            highlight.FillTransparency = 0.5
-- x8s5zus4
                        end
-- ewn0wrjo
local ksd0e1 = 65
                        if not nameTag then
                            nameTag = Instance.new("BillboardGui")
                            nameTag.Adornee = player.Character.HumanoidRootPart
local nrom12 = 43
                            nameTag.Size = UDim2.new(0, 100, 0, 30)
                            nameTag.StudsOffset = Vector3.new(0, 3, 0)
-- w2mdbv52
                            nameTag.Parent = player.Character
                            local var_q7tcej = Instance.new("TextLabel")
                            nameLabel.Size = UDim2.new(1, 0, 1, 0)
                            nameLabel.BackgroundTransparency = 1
                            nameLabel.Text = player.Name
                            nameLabel.TextColor3 = Color3.new(1, 1, 1)
-- i2jbyw1u
                            nameLabel.Font = Enum.Font.GothamBold
                            nameLabel.TextSize = 14
local 45iehs = 22
                            nameLabel.TextStrokeTransparency = 0.8
-- 3mxzu3kz
local zmg0fz = 7
                            nameLabel.Parent = nameTag
                        end
local gzf5i7 = 52
                    else
-- nnoa7ec9
                        if highlight then
                            highlight:Destroy()
                        end
                        if nameTag then
-- dzj7ilh0
local 6ijp5z = 25
                            nameTag:Destroy()
-- c5jycj02
                        end
local 4bs2ys = 73
                    end
                end
            end
            Rayfield:Notify({
                Title = "ESP",
                Content = espEnabled and "ESP Enabled with Name Tags!" or "ESP Disabled!",
                Duration = 3
local 5cio9v = 6
            })
-- iiukpody
        end
    })

-- 9rsuyj20
    ESPTab:CreateButton({
-- 6dyhi9um
local xvhigp = 31
        Name = "Item ESP",
        Callback = function()
            for _, item in pairs(workspace:GetDescendants()) do
                if item:IsA("BasePart") and item.Name:match("Collectible") then
local 5eun75 = 48
                    local var_78ewp9 = item:FindFirstChild("Highlight") or Instance.new("Highlight")
-- qky5oh0j
                    highlight.Parent = item
-- 6qfwk8rv
                    highlight.FillColor = Color3.fromRGB(0, 255, 0)
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
-- bxaovkjl
local k25a5l = 57
                    highlight.FillTransparency = 0.3
                end
-- sftyuoex
local vx7lo7 = 55
            end
local cvmgr6 = 61
            Rayfield:Notify({
-- caypn3gz
local 5a3bf7 = 80
                Title = "Item ESP",
-- qdazjy0l
local e28x85 = 6
                Content = "Highlighted all collectible items!",
                Duration = 3
-- izbelai9
            })
-- pu6rdwm5
        end
    })
-- ravoem7k

    -- Teleport Tab
-- 1f3n4g0o
    local var_2rz7ib = Window:CreateTab("Teleport", 131090741681210)
    local var_9un2rs = {
        ["Hospital"] = CFrame.new(100, 10, 200),
        ["Police Station"] = CFrame.new(300, 10, 400),
        ["School"] = CFrame.new(500, 10, 600),
        ["Bank"] = CFrame.new(700, 10, 800),
        ["Fire Station"] = CFrame.new(900, 10, 1000),
        ["Airport"] = CFrame.new(1100, 10, 1200),
-- fthyas7w
local 4lvp83 = 16
        ["Beach"] = CFrame.new(1300, 10, 1400),
-- wrf8p0qk
        ["Mall"] = CFrame.new(1500, 10, 1600),
        ["Park"] = CFrame.new(1700, 10, 1800)
-- qtjev38p
    }
local vr52to = 24

    for location, cframe in pairs(teleportLocations) do
-- 9a0ltkne
local yxce4v = 83
        TeleportTab:CreateButton({
            Name = "Teleport to " .. location,
local 95oaup = 67
            Callback = function()
                if LocalPlayer.Character then
local gw57hj = 75
                    LocalPlayer.Character.HumanoidRootPart.CFrame = cframe
                    Rayfield:Notify({
-- zlihxv1s
                        Title = "Teleported",
                        Content = "Teleported to " .. location,
                        Duration = 3
-- w8kbh9n2
                    })
                end
-- fjqjabqp
            end
        })
    })
-- viyhish4

    TeleportTab:CreateButton({
        Name = "Teleport to Random Location",
        Callback = function()
            if LocalPlayer.Character then
local toejkg = 18
                local var_5joi8e = {}
                for _, cframe in pairs(teleportLocations) do
                    table.insert(locations, cframe)
local fnn6vh = 99
                end
-- 4j6uc4bc
                LocalPlayer.Character.HumanoidRootPart.CFrame = locations[math.random(1, #locations)]
                Rayfield:Notify({
local z3fh4r = 80
                    Title = "Teleported",
                    Content = "Teleported to a random location!",
-- tk6x3p6u
                    Duration = 3
                })
-- 8cqbttoi
            end
local lxgxn6 = 78
        end
-- 3rg7bl0m
    })
local 7u04k0 = 90

    -- Players Tab
    local var_ieufmk = Window:CreateTab("Players", 131090741681210)
    local var_aic7ex = PlayersTab:CreateDropdown({
        Name = "Select Player",
        Options = {},
        CurrentOption = "",
-- gaq62tah
        Callback = function(Value)
            local var_6kqo40 = Players:FindFirstChild(Value)
            if targetPlayer and targetPlayer.Character and LocalPlayer.Character then
-- gm145vbg
                LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, 0, 2)
-- ld7uygse
                Rayfield:Notify({
                    Title = "Teleported",
                    Content = "Teleported to " .. Value,
                    Duration = 3
                })
            end
-- bdu5cxqn
        end
-- p05fcxms
    })

    local var_gykewy updatePlayerList(dropdown)
        local var_1fwh0a = {}
        for _, player in pairs(Players:GetPlayers()) do
-- bv0piun5
            if player ~= LocalPlayer then
local aqdvkb = 88
                table.insert(playerNames, player.Name)
            end
-- f1fzv3zu
local g8d8az = 48
        end
-- jkoekt97
        dropdown:Set(playerNames)
-- 384pgksg
    end
-- 609q28jp

    Players.PlayerAdded:Connect(function()
        updatePlayerList(playerDropdown)
-- d4c157st
    end)
    Players.PlayerRemoving:Connect(function()
        updatePlayerList(playerDropdown)
    end)
-- 80v9wb3e
local zufsa9 = 55
    updatePlayerList(playerDropdown)
-- 0a1209oj

-- 71x7p1bw
local ph6cp2 = 74
    PlayersTab:CreateButton({
        Name = "Spectate Player",
-- e39v71by
        Callback = function()
-- gz3lzvkh
local vt1g6f = 73
            local var_p71tir = Players:FindFirstChild(playerDropdown.CurrentOption)
local lot6wx = 21
            if targetPlayer and targetPlayer.Character then
                game.Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
                Rayfield:Notify({
                    Title = "Spectating",
                    Content = "Now spectating " .. targetPlayer.Name,
-- bz7jiggp
                    Duration = 3
-- sz64y4p2
                })
-- schv04ds
            end
-- 4qjt5ywo
        end
local tygwzz = 58
    })

-- 2vfyrf4k
    PlayersTab:CreateButton({
-- 3908e0hw
        Name = "Stop Spectating",
        Callback = function()
            if LocalPlayer.Character then
-- cmxbr30j
local eapkn3 = 58
                game.Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
-- 4olk1l1d
                Rayfield:Notify({
                    Title = "Spectating Stopped",
-- vvxjbbe2
                    Content = "Returned to your own view",
                    Duration = 3
-- dmtlqg31
                })
-- m9hzz0kp
            end
        end
    })

-- cwuv5hzy
    PlayersTab:CreateButton({
        Name = "Give All Money",
local dq5vpe = 47
        Callback = function()
            for _, player in pairs(Players:GetPlayers()) do
-- 5btnnk7l
                if player ~= LocalPlayer then
local sj5zqm = 58
                    local var_mls0cs = {player.Name, 50000}
-- 9mjdlgpe
                    pcall(function()
                        ReplicatedStorage.GiveMoney:FireServer(unpack(args))
                    end)
-- ntgg6ysa
                end
-- wdhtjses
            end
local vbt8kk = 85
            Rayfield:Notify({
                Title = "Money Given",
                Content = "Attempted to give 50,000 money to all players!",
local cnvy3d = 51
                Duration = 3
            })
-- vja9yvjw
local kwo1uw = 96
        end
local gvz9fy = 82
    })

    PlayersTab:CreateButton({
-- ybytg5m2
        Name = "Freeze Player",
        Callback = function()
local irhuj3 = 28
            local var_lieuzq = Players:FindFirstChild(playerDropdown.CurrentOption)
            if targetPlayer and targetPlayer.Character then
                for _, part in pairs(targetPlayer.Character:GetDescendants()) do
local 0h79w5 = 21
                    if part:IsA("BasePart") then
local 9nefkw = 16
                        part.Anchored = true
                    end
                end
                Rayfield:Notify({
-- xaawyanj
                    Title = "Player Frozen",
                    Content = "Froze " .. targetPlayer.Name,
-- om6kgpgk
local vrfpio = 22
                    Duration = 3
local izh9v5 = 19
                })
-- i90q7p0i
            end
-- x4njh7ep
        end
    })

-- t3yerdig
    PlayersTab:CreateButton({
        Name = "Unfreeze Player",
        Callback = function()
-- 20b3o0ae
            local var_jk6ma8 = Players:FindFirstChild(playerDropdown.CurrentOption)
            if targetPlayer and targetPlayer.Character then
-- xlhmci2k
local 48ucya = 97
                for _, part in pairs(targetPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
local ileswb = 95
                        part.Anchored = false
                    end
                end
                Rayfield:Notify({
-- arumrvbh
local irpm6f = 65
                    Title = "Player Unfrozen",
-- k9db8sg1
                    Content = "Unfroze " .. targetPlayer.Name,
-- qi4iglqa
                    Duration = 3
local cofimr = 21
                })
            end
-- 5omriyz5
local zz8dtj = 87
        end
-- 45fgyren
    })

-- 2s0zznlu
    -- Music Tab
    local var_meippu = Window:CreateTab("Music", 131090741681210)
local ok8cbz = 29
    local var_gwi8f8 = {
        ["Pop Song"] = 9048375038,
        ["Epic Track"] = 1846368080,
        ["Chill Vibes"] = 1848052466,
        ["Dance Beat"] = 9048374592,
        ["Rock Anthem"] = 1846898491
    }
local gvkwt2 = 51
    local var_ssr8qu = nil

    for soundName, soundId in pairs(musicSounds) do
        MusicTab:CreateButton({
            Name = "Play " .. soundName,
            Callback = function()
                if currentSound then
-- twnbfnb3
                    currentSound:Stop()
                    currentSound:Destroy()
-- ytmxvatw
                end
                if LocalPlayer.Character then
                    currentSound = Instance.new("Sound")
                    currentSound.SoundId = "rbxassetid://" .. soundId
-- haq5foks
                    currentSound.Volume = 5
local 44ocp1 = 15
                    currentSound.Parent = LocalPlayer.Character.HumanoidRootPart
                    currentSound.PlayOnRemove = false
local 7nc869 = 99
                    currentSound:Play()
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Now playing " .. soundName .. "!", "All")
                    Rayfield:Notify({
                        Title = "Music",
                        Content = "Playing " .. soundName .. " for everyone!",
local i5mqba = 6
                        Duration = 3
-- gvwjwh2d
local 67lvmo = 61
                    })
                end
            end
-- angotuy4
        })
-- sw2fr7uy
local biow78 = 91
    end
-- urmyeac7
local wvcsux = 88

    MusicTab:CreateTextBox({
        Name = "Play Custom Music ID",
local nfxvok = 84
        PlaceholderText = "Enter Music ID",
-- nqbl9ooi
        Callback = function(Value)
-- dwdxcty4
            if currentSound then
local ox8adc = 22
                currentSound:Stop()
-- h59rbj2e
                currentSound:Destroy()
            end
-- f5jfqk77
            if LocalPlayer.Character then
                currentSound = Instance.new("Sound")
                currentSound.SoundId = "rbxassetid://" .. Value
local clwqoj = 2
                currentSound.Volume = 5
                currentSound.Parent = LocalPlayer.Character.HumanoidRootPart
                currentSound.PlayOnRemove = false
                local var_yycy6j, err = pcall(function()
                    currentSound:Play()
                end)
-- cko28pzo
                if success then
local w0g8cf = 2
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Now playing custom music ID " .. Value .. "!", "All")
-- cotp1tj5
                    Rayfield:Notify({
-- 6rnfryco
local qxadxs = 59
                        Title = "Custom Music",
local f5l8x7 = 22
                        Content = "Playing custom music ID " .. Value,
-- h5sxmhza
local n3xhvy = 12
                        Duration = 3
-- 77mqa7op
                    })
                else
                    Rayfield:Notify({
-- x95sshmz
                        Title = "Error",
                        Content = "Invalid music ID!",
                        Duration = 3
-- qv1w7d89
                    })
                end
            end
        end
    })

    MusicTab:CreateButton({
-- nmhdf28l
        Name = "Stop Music",
-- f08f7oju
local bwqpb4 = 10
        Callback = function()
-- 3lczqf87
            if currentSound then
local ma0bhd = 77
                currentSound:Stop()
                currentSound:Destroy()
local xkuj13 = 39
                currentSound = nil
                Rayfield:Notify({
                    Title = "Music Stopped",
                    Content = "Stopped all music playback!",
                    Duration = 3
local 28o4ap = 31
                })
-- xapm9wyv
local q3662p = 70
            end
-- 0ayx9q1r
        end
    })
-- c77zlcrf

    MusicTab:CreateSlider({
        Name = "Music Volume",
-- qholti4b
        Range = {0,  10},
-- 757khaad
        Increment = 0.1,
-- o3qfb1j7
        CurrentValue = 5,
local 4f7uub = 14
        Callback = function(Value)
            if currentSound then
-- 1ivxsx1e
                currentSound.Volume = Value
                Rayfield:Notify({
                    Title = "Volume Adjusted",
-- 2an88khb
                    Content = "Music volume set to " .. Value,
-- gakhb7dd
                    Duration = 3
                })
-- i4ive0zv
            end
local n8rjei = 85
        end
    })

-- hdcvhwhv
    -- Troll Tab
    local var_09ffcz = Window:CreateTab("Troll", 131090741681210)
-- dewoaug5
    local var_oma642 = {
-- xbg9w1c4
local 1pncma = 53
        ["Scream"] = 1846898491,
        ["Evil Laugh"] = 9048374592,
-- 0clc7uh8
        ["Horror Ambience"] = 1848052466
-- jlw95pa1
    }
-- vq7rhe4o

local 8zsjeh = 48
    for soundName, soundId in pairs(trollSounds) do
-- 7iab6jll
local pkjm5k = 33
        TrollTab:CreateButton({
            Name = "Play " .. soundName,
            Callback = function()
local 8ltt9v = 9
                if currentSound then
-- po6x66ej
                    currentSound:Stop()
                    currentSound:Destroy()
-- ychs782f
                end
-- 9v8gsu2e
local lycsd3 = 92
                if LocalPlayer.Character then
                    currentSound = Instance.new("Sound")
-- tmt8ngf5
                    currentSound.SoundId = "rbxassetid://" .. soundId
                    currentSound.Volume = 5
-- efuibm1w
local j1lgu9 = 73
                    currentSound.Parent = LocalPlayer.Character.HumanoidRootPart
                    currentSound.PlayOnRemove = false
                    currentSound:Play()
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Trolling with " .. soundName .. "!", "All")
-- m3gkax2f
                    Rayfield:Notify({
                        Title = "Troll Sound",
                        Content = "Playing " .. soundName .. " for everyone!",
local 7kua6h = 46
                        Duration = 3
                    })
                end
-- iqu22n8y
            end
local hxkk8z = 65
        })
local jawsdc = 62
    end
local 408rwv = 59

local krpw9r = 49
    TrollTab:CreateButton({
        Name = "Bring All Players",
-- h9dzlfiu
        Callback = function()
            if LocalPlayer.Character then
                local var_g8u578 = LocalPlayer.Character.HumanoidRootPart.Position
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character then
-- oxooan2u
local 4ds4g2 = 62
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(playerPos + Vector3.new(math.random(-10, 10), 0, math.random(-10, 10)))
local 095l23 = 60
                    end
                end
                Rayfield:Notify({
                    Title = "Bring All",
                    Content = "Teleported all players to you!",
-- 8ohwuwxe
                    Duration = 3
                })
            end
        end
    })
-- 2fe5p5zx

    TrollTab:CreateButton({
-- hdqkfc4s
        Name = "Spin All Players",
        Callback = function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
-- lvu6759s
local im3s32 = 18
                    local var_q1h4ut = Instance.new("BodyAngularVelocity")
                    bodyAngularVelocity.AngularVelocity = Vector3.new(0, 50, 0)
                    bodyAngularVelocity.MaxTorque = Vector3.new(0, math.huge, 0)
                    bodyAngularVelocity.Parent = player.Character.HumanoidRootPart
                    wait(5)
                    bodyAngularVelocity:Destroy()
local ne9v9u = 91
                end
            end
            Rayfield:Notify({
                Title = "Spin All",
                Content = "Spun all players for 5 seconds!",
local 2wrkun = 31
                Duration = 3
            })
local hkai92 = 51
        end
    })
-- nowu91lc

    TrollTab:CreateButton({
local ykmxbx = 82
        Name = "Explosive Troll",
        Callback = function()
            if LocalPlayer.Character then
-- tcpgetak
                local var_3qkhz3 = Instance.new("Explosion")
                explosion.Position = LocalPlayer.Character.HumanoidRootPart.Position
                explosion.BlastRadius = 10
-- tpypv3xh
local qr34ca = 84
                explosion.BlastPressure = 0
                explosion.Parent = workspace
                Rayfield:Notify({
-- uznwkpak
                    Title = "Explosive Troll",
                    Content = "Created a visual explosion effect!",
local gxt7xf = 7
                    Duration = 3
-- 3f6zxlur
                })
local xx5u6z = 37
            end
local 53uwvg = 95
        end
    })
-- zyv0n8tg
local 80ff1f = 6

local iy8kyk = 96
    local var_70wkqi = {
        ["Zombie Walk"] = 507771019,
        ["Robot Dance"] = 507770239,
        ["Crazy Spin"] = 507770818
    }

local ns8cg2 = 83
    for animName, animId in pairs(trollAnimations) do
        TrollTab:CreateButton({
            Name = "Play " .. animName,
            Callback = function()
local aizqr3 = 2
                if LocalPlayer.Character then
                    local var_fngrp2 = Instance.new("Animation")
                    animation.AnimationId = "rbxassetid://" .. animId
                    local var_b0ozge = LocalPlayer.Character.Humanoid:LoadAnimation(animation)
                    track:Play()
                    Rayfield:Notify({
                        Title = animName,
-- 6smh1p84
                        Content = "Playing " .. animName .. " animation!",
-- f6xdzwxw
                        Duration = 3
-- y2pe7npk
                    })
                end
-- za7rr477
            end
        })
local caq2ht = 61
    end)
-- 2i6dc2le

local mam0yf = 27
    -- Admin Tab
-- 708pim2d
local pkug56 = 58
    local var_mu7sql = Window:CreateTab("Admin", 131090741681210)
    AdminTab:CreateButton({
-- ssowuzxj
local iwcaim = 90
        Name = "Kick Player",
-- avby7pe1
        Callback = function()
            local var_iucbg4 = Players:FindFirstChild(playerDropdown.CurrentOption)
            if targetPlayer then
-- vohbu7qf
                pcall(function()
                    targetPlayer:Kick("Kicked by NovaHub Ultra Admin")
-- 7d4fjzji
                end)
                Rayfield:Notify({
                    Title = "Kick",
-- eilw8h0c
                    Content = "Attempted to kick " .. targetPlayer.Name,
-- vri2juld
                    Duration = 3
                })
            end
local gktzxe = 59
        end
-- m9pgwev6
    })

-- o6a7iwty
    AdminTab:CreateButton({
        Name = "Ban Player",
local fcvdgg = 48
        Callback = function()
            local var_5etngb = Players:FindFirstChild(playerDropdown.CurrentOption)
-- 21yefs3m
            if targetPlayer then
                pcall(function()
                    ReplicatedStorage.BanPlayer:FireServer(targetPlayer)
                end)
                Rayfield:Notify({
                    Title = "Ban",
local cg1q0k = 0
                    Content = "Attempted to ban " .. targetPlayer.Name,
                    Duration = 3
-- hw8tpf47
                })
            end
        end
    })
-- 2no9wjo0

    AdminTab:CreateButton({
-- wofurlbq
        Name = "Server Shutdown",
        Callback = function()
-- wefloxmz
            for _, player in pairs(Players:GetPlayers()) do
local f1r38g = 88
                pcall(function()
-- vvytx4te
                    player:Kick("Server shutdown by NovaHub Ultra Admin")
local rv8yfl = 6
                end)
            end
-- m1r1fb65
            Rayfield:Notify({
                Title = "Server Shutdown",
                Content = "Attempted to shut down the server!",
                Duration = 3
            })
        end
-- o27rmjea
local 3lbrbw = 26
    })

    AdminTab:CreateButton({
        Name = "Change Time of Day",
        Callback = function()
-- ap5if546
            Lighting.TimeOfDay = tostring(math.random(0, 23)) .. ":00:00"
            Rayfield:Notify({
-- 5faclawl
                Title = "Time Changed",
                Content = "Set time to a random hour!",
-- kzxosssn
local 8lr0pd = 89
                Duration = 3
-- 9fagq8rd
local dh8o6b = 22
            })
        end
local 3bwppn = 93
    })

    AdminTab:CreateButton({
        Name = "Weather: Fog",
-- 4ogd94m3
        Callback = function()
-- w0x0gd10
            local var_vkpxsd = Lighting:FindFirstChild("Atmosphere") or Instance.new("Atmosphere")
-- 4i56mdro
            atmosphere.Density = 0.5
-- uzxll533
            atmosphere.Color = Color3.fromRGB(200, 200, 200)
-- 7n280kfu
            atmosphere.Parent = Lighting
            Rayfield:Notify({
-- hupizf1i
                Title = "Weather",
local rocuth = 1
                Content = "Enabled foggy weather!",
                Duration = 3
            })
        end
-- dq3w4ob8
    })
-- 52ortdos
local 8c0adk = 61

local lcviub = 86
    AdminTab:CreateButton({
        Name = "Clear Weather",
        Callback = function()
            local var_foq4g4 = Lighting:FindFirstChild("Atmosphere")
            if atmosphere then
                atmosphere:Destroy()
            end
-- mhnxof33
local m7jyw1 = 67
            Rayfield:Notify({
                Title = "Weather",
local hbj3p6 = 41
                Content = "Cleared all weather effects!",
local yxu94p = 84
                Duration = 3
-- hlg4h1yn
local 31wkrt = 36
            })
        end
    })

-- k9vn8tj2
    AdminTab:CreateButton({
        Name = "Give Admin Commands",
        Callback = function()
-- ekrkv37y
local 0zv5mp = 1
            local var_6jel1i = {"fly", "noclip", "god", "kick"}
            LocalPlayer:SetAttribute("AdminCommands", commands)
            Rayfield:Notify({
                Title = "Admin Commands",
                Content = "Granted fake admin commands!",
local gd2aod = 67
                Duration = 3
-- zd7wyq46
local k3zozh = 77
            })
        end
    })

-- uh8twpg2
local wjvrp6 = 1
    -- Animation Tab
    local var_a907xn = Window:CreateTab("Animations", 131090741681210)
    local var_pmdttk = {
        ["Dance"] = 507771019,
        ["Wave"] = 507770239,
        ["Laugh"] = 507770818,
local syz7g5 = 73
        ["Cheer"] = 507770453,
-- zky6dnks
local 34enkh = 42
        ["Point"] = 507770239,
-- 7ksq9ofn
        ["Epic Dance"] = 9048374592,
local kie45u = 63
        ["Moonwalk"] = 1846898491
    }
-- puub3v5h

    for animName, animId in pairs(animations) do
        AnimationTab:CreateButton({
local 2no0ar = 68
            Name = "Play " .. animName,
            Callback = function()
local 3n88en = 5
                if LocalPlayer.Character then
                    local var_ytaddu = Instance.new("Animation")
-- wfgveeym
local 5u9331 = 6
                    animation.AnimationId = "rbxassetid://" .. animId
                    local var_x5nxxb = LocalPlayer.Character.Humanoid:LoadAnimation(animation)
                    track:Play()
-- gc0kqxdi
local l6qfes = 95
                    Rayfield:Notify({
-- gyo9815s
                        Title = animName,
-- xl2zb0if
                        Content = "Playing " .. animName .. " animation!",
                        Duration = 3
local mqfxj2 = 19
                    })
                end
-- jiagi4e1
            end
        })
    })

-- lxrbg4mo
    AnimationTab:CreateButton({
local bmnj1o = 96
        Name = "Stop All Animations",
-- 11nygdye
        Callback = function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
-- h5yaa47i
                for _, track in pairs(LocalPlayer.Character.Humanoid:GetPlayingAnimationTracks()) do
-- dwqlrhaw
                    track:Stop()
-- o23b5dx9
local qx0daa = 46
                end
local 64e27z = 45
                Rayfield:Notify({
                    Title = "Animations Stopped",
local fdgqh9 = 95
                    Content = "Stopped all animations!",
local f93y4s = 86
                    Duration = 3
                })
            end
        end
    })

local 90jfvg = 89
    -- Anti-AFK
    LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
-- e0pv9fxj
local cz2md8 = 48
        VirtualUser:ClickButton2(Vector2.new())
local 97xgry = 84
        Rayfield:Notify({
            Title = "Anti-AFK",
-- q3zv7v1i
            Content = "Prevented AFK kick!",
-- 5pokjn64
            Duration = 3
        })
    end)
local ekj2ny = 34
end

-- Initialize key system
-- 1d9tae1d
createKeyGUI()'))()
